#|==============================================================================


Unsigned Integer Testing - v1.08

Copyright 2022 Alec Dee - MIT license - SPDX: MIT
deegen1.github.io - akdee144@gmail.com


--------------------------------------------------------------------------------
Notes


average instructions per function
cmp: 28
min: 33
max: 33
set: 24
neg: 25
add: 30
sub: 31
mul: 707
div: 87
shl: 139
shr: 112
not: 26
and: 469
 or: 470
xor: 471


|#


0 0 test.main


test.main:
	# Unsigned integer tests.
	0 ? string.print 'u 'n 's 'i 'g 'n 'e 'd '  'i 'n 't 'e 'g 'e 'r '  't 'e 's 't 's 10 0

	0 ? random.seed .z+1

	# ------------------------ Timing ------------------------
	.time .time ?+1
	.time 0-5   ?+1

	# ------------------------- Bits -------------------------
	# Calculate how many bits we're using. Set [hbit]=1<<(bits-1).
	.tmp0     .z-1   ?+1
	.bitloop:
	.tmp0     .z     .bitdone
	.hbit     .hbit  ?+1
	.hbit     .tmp0  ?+1
	.tmp0     .hbit  ?+1
	.bits     .z-1   .bitloop
	.bitdone:

	# Set other bit related values.
	.nbits    .bits  ?+1
	.nbits-1  .bits  ?+1
	.bits+1   .nbits ?+1
	.bits+2   .nbits ?+1
	.shiftmax .nbits ?+1
	.shiftmax .nbits ?+1
	.shiftmax .nbits ?+1
	.shiftsub .nbits ?+1
	.shiftsub .z-2   ?+1

	0 ? string.print 'b 'i 't 's ': '  string.uint .bits 10 0

.loop:
	# While trial<trials.
	.tmp0 .tmp0 ?+1
	.tmp0 .trials ?+1
	.tmp1 .tmp1 ?+1
	.tmp1 .tmp0 ?+1
	.tmp1 .trial .done

	# ---------------------- Parameters ----------------------
	# Generate A, B, and C parameters.
	0 ? test.rand.uint .a
	0 ? test.rand.uint .b
	0 ? random.mod     .c .shiftmax
	.c .shiftsub ?+1

	# Randomly set A=B.
	0 ? random.mod     .tmp0 .eqprob
	.tmp0 .z    ?+4
	.tmp0 .tmp0 .nosetab
	.tmp0 .b    ?+1
	.a    .a    ?+1
	.a    .tmp0 ?+1
	.nosetab:

	# Copy A, B, and C to compare later.
	.tmp0 .tmp0 ?+1
	.tmp0 .a    ?+1
	.a0   .a0   ?+1
	.a0   .tmp0 ?+1
	.tmp0 .tmp0 ?+1
	.tmp0 .b    ?+1
	.b0   .b0   ?+1
	.b0   .tmp0 ?+1
	.tmp0 .tmp0 ?+1
	.tmp0 .c    ?+1
	.c0   .c0   ?+1
	.c0   .tmp0 ?+1

	# 0 ? string.print string.uint .trial '  string.uint .a '  string.uint .b ' 
	#                  string.uint .c 10 0

	# ----------------------- Compare ------------------------
	# Compare A and B manually.
	.exp0 .exp0 ?+1
	.exp0 .z-1  ?+1
	.b    .a    ?+4
	.exp0 .z+1  ?+7
	.b    .z    ?+4
	.exp0 .z-1  ?+1
	.tmp0 .tmp0 ?+1
	.tmp0 .a    ?+1
	.b    .tmp0 ?+1

	.ret0 .ret0 ?+1
	0 ? test.measure .cmpops .cmplt 0 ? uint.cmp .a .b .cmplt .cmpeq .cmpgt
	0-1 0 ?-2
	.cmpgt: .ret0   .z-1  ?+1
	.cmpeq: .ret0   .z-1  ?+1
	.cmplt: .cmpops .ret0 ?+1
	0 ? test.cmp .exp0 .ret0 0


	# ----------------------- Minimum ------------------------
	# [exp0]=min([a],[b])
	.tmp0 .tmp0 ?+1
	.exp0 .z    ?+4
	.tmp0 .b    ?+4
	.tmp0 .a    ?+1
	.exp0 .exp0 ?+1
	.exp0 .tmp0 ?+1

	0 ? test.measure .minops ?+7 0 ? uint.min .ret0 .a .b
	0 ? test.cmp .exp0 .ret0 1

	# ----------------------- Maximum ------------------------
	# [exp1]=max([a],[b]). Use max=[a]+[b]-min.
	.exp0 .a    ?+1
	.exp0 .b    ?+1
	.exp1 .exp1 ?+1
	.exp1 .exp0 ?+1

	0 ? test.measure .maxops ?+7 0 ? uint.max .ret0 .a .b
	0 ? test.cmp .exp1 .ret0 2

	# ------------------------- Set --------------------------
	0 ? test.measure .setops ?+6 0 ? uint.set .ret0 .a
	0 ? test.cmp .a .ret0 3

	# ----------------------- Negation -----------------------
	# Calculate -A manually.
	.exp0 .exp0 ?+1
	.exp0 .a    ?+1

	0 ? test.measure .negops ?+6 0 ? uint.neg .ret0 .a
	0 ? test.cmp .exp0 .ret0 4

	# ----------------------- Addition -----------------------
	# Calculate A+B manually.
	.tmp0 .tmp0 ?+1
	.tmp0 .a    ?+1
	.tmp0 .b    ?+1
	.exp0 .exp0 ?+1
	.exp0 .tmp0 ?+1

	0 ? test.measure .addops ?+7 0 ? uint.add .ret0 .a .b
	0 ? test.cmp .exp0 .ret0 5

	# --------------------- Subtraction ----------------------
	# Calculate A-B manually.
	.exp0 .b    ?+1
	.exp0 .b    ?+1

	0 ? test.measure .subops ?+7 0 ? uint.sub .ret0 .a .b
	0 ? test.cmp .exp0 .ret0 6

	# -------------------- Multiplication --------------------
	# Calculate A*B manually.
	.exp0 .exp0 ?+1
	# [tmp1]=[a]
	.tmp0 .tmp0 ?+1
	.tmp0 .a    ?+1
	.tmp1 .tmp1 ?+1
	.tmp1 .tmp0 ?+1
	# [tmp2]=65
	.tmp2 .tmp2 ?+1
	.tmp2 .nbits-1 ?+1
	.mulloop:
	.tmp2 .z+1  .muldone
	# exp<<=1
	.tmp0 .tmp0 ?+1
	.tmp0 .exp1 ?+1
	.exp1 .tmp0 ?+1
	.tmp0 .tmp0 ?+1
	.tmp0 .exp0 ?+1
	.tmp0 .z+1  ?+1
	.exp0 .tmp0 ?+4
	# If [exp0] carries.
	.exp1 .z-1  ?+1
	.exp0 .z+1  ?+1
	# [tmp1]<<=1
	.tmp0 .tmp0 ?+1
	.tmp0 .tmp1 ?+1
	.tmp0 .z+1  ?+1
	.tmp1 .tmp0 .mulloop
	# [exp0]+=[b]
	.tmp0 .tmp0 ?+1
	.tmp0 .b    ?+1
	.tmp0 .z+1  ?+1
	.exp0 .tmp0 ?+4
	.exp1 .z-1  ?+1
	.exp0 .z+1  ?+1
	.tmp0 .tmp0 .mulloop
	.muldone:

	0 ? test.measure .mulops ?+8 0 ? uint.mul .ret1 .ret0 .a .b
	0 ? test.cmp .exp0 .ret0 7
	0 ? test.cmp .exp1 .ret1 8

	# ----------------------- Division -----------------------
	# For B!=0, q=A/B, and r=A%B, we have A=q*B+r and r<B.
	.b .z .div0
	.divden .z-1 ?+1
	0 ? test.measure .divops ?+8 0 ? uint.div .ret0 .ret1 .a .b
	0 ? uint.cmp .ret1 .b .remlt ?+2 ?+1
	0 ? test.cmp .z .b 9
	.remlt:
	0 ? uint.mul .tmp0 .tmp1 .ret0 .b
	0 ? test.cmp .z .tmp0 10
	0 ? uint.add .tmp1 .ret1 .tmp1
	0 ? test.cmp .a .tmp1 11
	.div0:

	# ---------------------- Shift Left ----------------------
	# Calculate A<<C manually.
	# [exp0]=[a]
	.tmp0 .tmp0 ?+1
	.tmp0 .a    ?+1
	.exp0 .exp0 ?+1
	.exp0 .tmp0 ?+1
	# [tmp2]=-[c]
	.tmp2 .tmp2 ?+1
	.tmp2 .c    ?+1
	.shlloop:
	.exp0 .z    .shldone
	.tmp2 .z    .shldone
	.tmp0 .tmp0 ?+1
	.tmp0 .exp0 ?+1
	.exp0 .tmp0 ?+1
	.tmp2 .z-1  .shlloop
	.shldone:

	0 ? test.measure .shlops ?+7 0 ? uint.shl .ret0 .a .c
	0 ? test.cmp .exp0 .ret0 12

	# --------------------- Shift Right ----------------------
	# Calculate A>>C manually.
	.exp0 .exp0 ?+1
	# [tmp1]=[a]
	.tmp0 .tmp0 ?+1
	.tmp0 .a    ?+1
	.tmp1 .tmp1 ?+1
	.tmp1 .tmp0 ?+1
	# [tmp2]=-[c]-1
	.tmp2 .tmp2 ?+1
	.tmp2 .c    ?+1
	.tmp2 .z+1  ?+1
	.shrloop:
	.tmp2 .nbits-1 .shrdone
	.tmp2 .bits+2 ?+1
	# [exp0]<<=1
	.tmp0 .tmp0 ?+1
	.tmp0 .exp0 ?+1
	.exp0 .tmp0 ?+1
	# [tmp1]<<=1
	.tmp0 .tmp0 ?+1
	.tmp0 .tmp1 ?+1
	.tmp0 .z+1  ?+1
	.tmp1 .tmp0 .shrloop
	.exp0 .z-1  .shrloop
	.shrdone:

	0 ? test.measure .shrops ?+7 0 ? uint.shr .ret0 .a .c
	0 ? test.cmp .exp0 .ret0 13

	# ------------------------- Not --------------------------
	# ~A=-1-A
	.exp0 .exp0 ?+1
	.exp0 .z+1  ?+1
	.exp0 .a    ?+1

	0 ? test.measure .notops ?+6 0 ? uint.not .ret0 .a
	0 ? test.cmp .exp0 .ret0 14

	# ------------------------- And --------------------------
	# Calculate A&B manually.
	# [exp0]=[a]
	.tmp0 .tmp0 ?+1
	.tmp0 .a    ?+1
	.exp0 .exp0 ?+1
	.exp0 .tmp0 ?+1
	# [exp1]=[b]
	.tmp0 .tmp0 ?+1
	.tmp0 .b    ?+1
	.exp1 .exp1 ?+1
	.exp1 .tmp0 ?+1
	# [tmp2]=65
	.tmp2 .tmp2 ?+1
	.tmp2 .nbits-1 ?+1
	.andloop:
	.tmp2 .z+1  .anddone
	# [exp0]<<=1
	.tmp0 .tmp0 ?+1
	.tmp0 .exp0 ?+1
	.exp0 .tmp0 ?+1
	# [exp1]<<=1
	.tmp1 .tmp1 ?+1
	.tmp1 .exp1 ?+1
	.tmp1 .z+1  ?+1
	# Set [exp0] if both carry.
	.exp1 .tmp1 .andloop
	.tmp0 .z    .andloop
	.tmp0 .hbit ?+4
	.tmp0 .tmp0 .andloop
	.exp0 .z-1  .andloop
	.anddone:

	0 ? test.measure .andops ?+7 0 ? uint.and .ret0 .a .b
	0 ? test.cmp .exp0 .ret0 15

	# -------------------------- Or --------------------------
	# A|B=A+B-(A&B)
	.ret0 .a    ?+1
	.ret0 .b    ?+1
	.exp1 .exp1 ?+1
	.exp1 .ret0 ?+1

	0 ? test.measure .orops ?+7 0 ? uint.or .ret0 .a .b
	0 ? test.cmp .exp1 .ret0 16

	# ------------------------- Xor --------------------------
	# A^B=(A|B)-(A&B)
	.exp1 .exp0 ?+1

	0 ? test.measure .xorops ?+7 0 ? uint.xor .ret0 .a .b
	0 ? test.cmp .exp1 .ret0 17

	# Make sure parameters haven't been modified.
	0 ? test.cmp .a0 .a 18
	0 ? test.cmp .b0 .b 19
	0 ? test.cmp .c0 .c 20

	.trial .z-1 .loop

.done:
	# Print instruction counts.
	0 ? uint.div .cmpops 0 .cmpops .trial
	0 ? uint.div .minops 0 .minops .trial
	0 ? uint.div .maxops 0 .maxops .trial
	0 ? uint.div .setops 0 .setops .trial
	0 ? uint.div .negops 0 .negops .trial
	0 ? uint.div .addops 0 .addops .trial
	0 ? uint.div .subops 0 .subops .trial
	0 ? uint.div .mulops 0 .mulops .trial
	0 ? uint.div .divops 0 .divops .divden
	0 ? uint.div .shlops 0 .shlops .trial
	0 ? uint.div .shrops 0 .shrops .trial
	0 ? uint.div .notops 0 .notops .trial
	0 ? uint.div .andops 0 .andops .trial
	0 ? uint.div  .orops 0  .orops .trial
	0 ? uint.div .xorops 0 .xorops .trial
	0 ? string.print 'a 'v 'e 'r 'a 'g 'e '  'i 'n 's 't 'r 'u 'c 't 'i 'o
	                 'n 's '  'p 'e 'r '  'f 'u 'n 'c 't 'i 'o 'n 10 0
	0 ? string.print 'c 'm 'p ': '  string.uint .cmpops 10 0
	0 ? string.print 'm 'i 'n ': '  string.uint .minops 10 0
	0 ? string.print 'm 'a 'x ': '  string.uint .maxops 10 0
	0 ? string.print 's 'e 't ': '  string.uint .setops 10 0
	0 ? string.print 'n 'e 'g ': '  string.uint .negops 10 0
	0 ? string.print 'a 'd 'd ': '  string.uint .addops 10 0
	0 ? string.print 's 'u 'b ': '  string.uint .subops 10 0
	0 ? string.print 'm 'u 'l ': '  string.uint .mulops 10 0
	0 ? string.print 'd 'i 'v ': '  string.uint .divops 10 0
	0 ? string.print 's 'h 'l ': '  string.uint .shlops 10 0
	0 ? string.print 's 'h 'r ': '  string.uint .shrops 10 0
	0 ? string.print 'n 'o 't ': '  string.uint .notops 10 0
	0 ? string.print 'a 'n 'd ': '  string.uint .andops 10 0
	0 ? string.print '  'o 'r ': '  string.uint  .orops 10 0
	0 ? string.print 'x 'o 'r ': '  string.uint .xorops 10 0
	0 ? string.print 'p 'a 's 's 'e 'd 10 0


	# ------------------------ Timing ------------------------
	.tmp0 .tmp0 ?+1
	.tmp0 0-5   ?+1
	.time .tmp0 ?+1
	0 ? uint.div .time .tmp0 .time 0-4
	0 ? uint.mul 0 .tmp0 .tmp0 .timedec
	0 ? uint.div .tmp0 0 .tmp0 0-4
	0 ? string.print 't 'i 'm 'e ': '  string.uint .time '. string.uintinl .tmp0 10 6 '0 10 0

	0 ? mem.alloc.verifyfree

	# Exit
	0-1 0 ?-2


	# Variables
	0-2 0-1 .z:0 1
	.a:0
	.b:0
	.c:0
	.eqprob:64
	.hbit:0
	0-1 .nbits:0
	.bits:0 1 2
	.shiftmax:0
	.shiftsub:0
	.time:0
	.timedec:1000000
	.cmpops:0
	.minops:0
	.maxops:0
	.setops:0
	.negops:0
	.addops:0
	.subops:0
	.mulops:0
	.divops:0
	.divden:0
	.shlops:0
	.shrops:0
	.notops:0
	.andops:0
	.orops:0
	.xorops:0
	.trial:0
	.trials:2048
	.exp0:0
	.exp1:0
	.ret0:0
	.ret1:0
	.tmp0:0
	.tmp1:0
	.tmp2:0
	# Place these far away from .a, .b, and .c in order to minimize accidental use
	# by functions.
	.a0:0
	.b0:0
	.c0:0


test.rand.uint:
	# Call  : 0 ? test.rand ret
	# Effect: [ret]=(rand)
	# Generate a random integer such that the probability of any bitcount is uniform.
	# Setup new stack.
	.tmp0   .tmp0   ?+1
	.tmp0   .p0     ?+1
	0       .z+2    ?+1
	0       .tmp0   ?+1
	.p0     0       ?+1
	.addr   0       ?+1
	0       0       ?+1
	# Get [ret]
	.tmp0   .tmp0   ?+1
	.tmp0   .p0:0   ?+1
	.p5     .p5     ?+1
	.p5     .tmp0   ?+1
	.p6     .p6     ?+1
	.p6     .tmp0   ?+1
	# Shuffle arr.
	0 ? random.shuffle .arr0 test.main.bits
	# Calculate how many bits we want to set.
	0 ? random.mod .i test.main.bits
	.tmp0   .tmp0   ?+1
	.b0     .b0     ?+1
	.b0     .narr   ?+1
	.i      .z-1    ?+1
.setbits:
	.i      .z+1    .setdone
	.tmp0   .b0:0   ?+1
	.b0     .z-1    .setbits
.setdone:
	# Return
	.tmp1   .tmp1   ?+1
	.tmp1   .p5:0   ?+1
	.tmp0   .tmp1   ?+1
	.p6:0   .tmp0   ?+1  # [ret]=[rand]
	0       0       .addr:1
	# Variables
	0-1 .z:0 1 2
	.tmp0:0
	.tmp1:0
	.i:0
	.arr:
		0x1 0x2 0x4 0x8 0x10 0x20 0x40 0x80 0x100 0x200 0x400 0x800 0x1000 0x2000 0x4000
		0x8000 0x10000 0x20000 0x40000 0x80000 0x100000 0x200000 0x400000 0x800000
		0x1000000 0x2000000 0x4000000 0x8000000 0x10000000 0x20000000 0x40000000
		0x80000000 0x100000000 0x200000000 0x400000000 0x800000000 0x1000000000
		0x2000000000 0x4000000000 0x8000000000 0x10000000000 0x20000000000 0x40000000000
		0x80000000000 0x100000000000 0x200000000000 0x400000000000 0x800000000000
		0x1000000000000 0x2000000000000 0x4000000000000 0x8000000000000 0x10000000000000
		0x20000000000000 0x40000000000000 0x80000000000000 0x100000000000000
		0x200000000000000 0x400000000000000 0x800000000000000 0x1000000000000000
		0x2000000000000000 0x4000000000000000 0x8000000000000000
	.arr0:.arr
	.narr:0-.arr


test.cmp:
	# Call  : 0 ? test.cmp exp val id
	# Setup stack.
	.tmp    .tmp    ?+1
	.tmp    .p0     ?+1
	0       .tmp    ?+1
	0       .z+2    ?+1
	.p0     0       ?+1
	.p2     0       ?+1
	.id     0       ?+1
	.ret    0       ?+1
	0       0       ?+1
	# Get [exp]
	.tmp    .tmp    ?+1
	.tmp    .p0:0   ?+1
	.p1     .p1     ?+1
	.p1     .tmp    ?+1
	.tmp    .tmp    ?+1
	.tmp    .p1:0   ?+1
	.exp    .tmp    ?+1
	# Get [val]
	.tmp    .tmp    ?+1
	.tmp    .p2:1   ?+1
	.p3     .p3     ?+1
	.p3     .tmp    ?+1
	.tmp    .tmp    ?+1
	.tmp    .p3:0   ?+1
	.val    .val    ?+1
	.val    .tmp    ?+1
	# Compare [exp] and [val].
	.exp    .val    ?+1
	.exp    .z      .ret:3
	.exp    .tmp    ?+1
	# ERROR
	0 ? string.print 'E 'R 'R 'O 'R 10 0
	# line
	0 ? string.print 't 'r 'i 'a 'l '  ': '  string.uint test.main.trial 10 0
	# test
	0 ? string.print 't 'e 's 't '  '  ': '  string.uint .id:2 10 0
	# expect
	0 ? string.print 'e 'x 'p 'e 'c 't ': '  string.uint .exp 10 0
	# return
	0 ? string.print 'r 'e 't 'u 'r 'n ': '  string.uint .val 10 0
	0-1 0 ?-2
	# Variables
	.exp:0
	.val:0
	.z:0 1 2
	.tmp:0


test.measure:
	# 0 ? test.measure counter return 0 ? func arg0 arg1 ...
	# counter = the address for counting instructions.
	# return  = address the function will return to when finished.
	# Emulates the execution of a function and measures how many instructions it uses.
	# Uses 24+20*n instructions for n emulated instructions.
	.tmp    .a0     ?+1
	.nret   .tmp    ?+1
	.tmp    0       ?+1
	.dif    .tmp    ?+1
	.dif    .z+4    ?+1
	# Setup counter.
	0       .z+2    ?+1
	.p0     .p0     ?+1
	.p0     0       ?+1
	.tmp    .tmp    ?+1
	.tmp    .p0:0   ?+1
	.cnt    .cnt    ?+1
	.cnt    .tmp    ?+1
	# Get the negative return address. If [nret]+[dif0]+[dif1]+...=0, then return.
	0       .z+1    ?+1
	.p1     .p1     ?+1
	.p1     0       ?+1
	.nret   .p1:0   ?+1
	# Reset stack address.
	0       0       .loop
.jmp:
	# We jumped, set [dif]=[a0]-[c].
	.tmp    .tmp    ?+1
	.tmp    .a0     ?+1
	.dif    .tmp    ?+1
.loop:
	# Update a, b, and c addresses.
	.a0     .dif    ?+1
	.b0     .dif    ?+1
	.c0     .dif    ?+1
	.nret   .dif    ?+1
	.dif    .dif    ?+1
	# Return if ip=[ret].
	.nret   .z      .ret
	# Increment the instruction counter.
	.cnt:0  .z-1    ?+1
	# Load [a]. a0 will hold the return address when we're done.
	.tmp    .tmp    ?+2
	.ret:   .tmp
	.tmp    .a0:0   ?+1
	.a      .a      ?+1
	.a      .tmp    ?+1
	# Load [b].
	.tmp    .tmp    ?+1
	.tmp    .b0:1   ?+1
	.b      .b      ?+1
	.b      .tmp    ?+1
	# Set [dif]=-[c].
	.dif    .c0:2   ?+1
	# Execute instruction.
	.a:0    .b:0    .jmp
	# We failed to jump, set [dif]=-3.
	.dif    .dif    ?+1
	.dif    .z+3    .loop
	# Variables
	.tmp:0
	.nret:0
	.dif:0
	0-2 0-1 .z:0 1 2 3 4


