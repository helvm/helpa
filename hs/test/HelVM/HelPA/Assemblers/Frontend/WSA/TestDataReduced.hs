module HelVM.HelPA.Assemblers.Frontend.WSA.TestDataReduced where

import           HelVM.HelPA.Assemblers.Backend.WSA.Instruction
import           HelVM.HelPA.Assemblers.Backend.WSA.Token

ioILReduced :: InstructionList
ioILReduced =
  [Mark "prints",Dup,BranchZ "prints_end",OutputChar,Branch "prints"
  ,Mark "prints_end",Pop,Return
  ,Mark "printsln",Call "prints",Push 10,OutputChar,Return
  ]

ioTL :: TokenList
ioTL = [N,S,S,S,T,T,T,S,S,S,S,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,S,S,T,T,T,S,S,T,T,N,S,N,S,N,T,S,S,T,T,T,S,S,S,S,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,S,S,T,T,T,S,S,T,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,T,S,S,T,T,S,S,T,S,S,N,T,N,S,S,N,S,N,S,T,T,T,S,S,S,S,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,S,S,T,T,T,S,S,T,T,N,N,S,S,S,T,T,T,S,S,S,S,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,S,S,T,T,T,S,S,T,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,T,S,S,T,T,S,S,T,S,S,N,S,S,N,N,T,N,N,S,S,S,T,T,T,S,S,S,S,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,S,S,T,T,T,S,S,T,T,S,T,T,S,T,T,S,S,S,T,T,S,T,T,T,S,N,N,S,T,S,T,T,T,S,S,S,S,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,S,S,T,T,T,S,S,T,T,N,S,S,S,T,S,T,S,T,N,S,S,N,T,N]

ioWS :: String
ioWS = ""

----

memoryILReduced :: InstructionList
memoryILReduced =
  [Mark "memcopy"
  ,Mark "mem_copy"
  ,Mark "mem_move",Push 3,Swap,Store,Push 2,Swap,Store,Push 1,Swap,Store,Push 3,Load,Dup,BranchM "memcopy_end:1",Dup,BranchZ "memcopy_end:1",Branch "memcopy_end:2"
  ,Mark "memcopy_end:1",Pop,Branch "memcopy_end"
  ,Mark "memcopy_end:2",Pop,Push 1,Load,Push 2,Load,Sub,BranchZ "memcopy_end",Push 1,Load,Push 2,Load,Sub,BranchM "memcopy_loop_dest_greater_source_begin",Branch "memcopy_loop_source_greater_dest"
  ,Mark "memcopy_loop_source_greater_dest",Push 2,Load,Push 1,Load,Load,Store,Push 2,Push 2,Load,Push 1,Add,Store,Push 1,Push 1,Load,Push 1,Add,Store,Push 3,Push 3,Load,Push 1,Sub,Store,Push 3,Load,BranchZ "memcopy_end",Branch "memcopy_loop_source_greater_dest"
  ,Mark "memcopy_loop_dest_greater_source_begin",Push 2,Push 2,Load,Push 3,Load,Add,Push 1,Sub,Store,Push 1,Push 1,Load,Push 3,Load,Add,Push 1,Sub,Store
  ,Mark "memcopy_loop_dest_greater_source",Push 2,Load,Push 1,Load,Load,Store,Push 2,Push 2,Load,Push 1,Sub,Store,Push 1,Push 1,Load,Push 1,Sub,Store,Push 3,Push 3,Load,Push 1,Sub,Store,Push 3,Load,BranchZ "memcopy_end",Branch "memcopy_loop_dest_greater_source"
  ,Mark "memcopy_end",Return
  ,Mark "mem_zero"
  ,Mark "mem_zero_start",Dup,BranchZ "mem_zero_end",Swap,Dup,Push 0,Store,Push 1,Add,Swap,Push 1,Sub,Branch "mem_zero_start"
  ,Mark "mem_zero_end",Pop,Pop,Return
  ,Mark "numeriere",Push 2,Swap,Store,Push 1,Swap,Store,Push 1,Load
  ,Mark "numeriere_start",Dup,Dup,Store,Push 1,Add,Dup,Push 2,Load,Sub,BranchZ "numeriere_end",Branch "numeriere_start"
  ,Mark "numeriere_end",Pop,Return]

memoryTL :: TokenList
memoryTL =  [N,S,S,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,N,N,S,S,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,S,T,T,T,T,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,N,N,S,S,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,S,T,T,T,T,T,S,T,T,S,T,T,S,T,S,T,T,S,T,T,T,T,S,T,T,T,S,T,T,S,S,T,T,S,S,T,S,T,N,S,S,S,T,T,S,N,T,T,T,S,S,S,S,T,S,S,N,T,T,T,S,S,S,S,T,S,N,T,T,T,S,S,S,S,T,T,T,T,T,S,N,S,N,T,T,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,T,S,S,T,T,S,S,T,S,S,S,S,T,T,T,S,T,S,S,S,T,T,S,S,S,T,N,S,N,S,N,T,S,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,T,S,S,T,T,S,S,T,S,S,S,S,T,T,T,S,T,S,S,S,T,T,S,S,S,T,N,N,S,N,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,T,S,S,T,T,S,S,T,S,S,S,S,T,T,T,S,T,S,S,S,T,T,S,S,T,S,N,N,S,S,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,T,S,S,T,T,S,S,T,S,S,S,S,T,T,T,S,T,S,S,S,T,T,S,S,S,T,N,S,S,N,N,S,N,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,T,S,S,T,T,S,S,T,S,S,N,N,S,S,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,T,S,S,T,T,S,S,T,S,S,S,S,T,T,T,S,T,S,S,S,T,T,S,S,T,S,N,S,S,N,S,S,S,T,T,T,T,S,S,S,T,S,T,T,T,T,S,S,T,N,T,S,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,T,S,S,T,T,S,S,T,S,S,N,S,S,S,T,T,T,T,S,S,S,T,S,T,T,T,T,S,S,T,N,T,T,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,S,T,S,T,T,T,T,T,S,T,T,S,T,T,S,S,S,T,T,S,T,T,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,T,T,S,T,T,T,S,S,T,S,S,T,T,S,S,T,S,T,S,T,T,S,S,S,S,T,S,T,T,T,S,T,S,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,S,S,T,T,S,T,T,S,S,T,S,T,S,T,S,T,T,T,T,T,S,T,T,S,S,S,T,S,S,T,T,S,S,T,S,T,S,T,T,S,S,T,T,T,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,N,N,S,N,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,S,T,S,T,T,T,T,T,S,T,T,S,T,T,S,S,S,T,T,S,T,T,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,S,S,T,T,S,T,T,S,S,T,S,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,T,T,S,T,T,T,S,S,T,S,S,T,T,S,S,T,S,T,S,T,T,S,S,S,S,T,S,T,T,T,S,T,S,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,N,N,S,S,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,S,T,S,T,T,T,T,T,S,T,T,S,T,T,S,S,S,T,T,S,T,T,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,S,S,T,T,S,T,T,S,S,T,S,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,T,T,S,T,T,T,S,S,T,S,S,T,T,S,S,T,S,T,S,T,T,S,S,S,S,T,S,T,T,T,S,T,S,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,N,S,S,S,T,S,T,T,T,S,S,S,T,T,T,T,T,T,T,T,T,S,S,S,S,T,S,S,S,S,T,S,T,T,T,S,S,S,T,T,S,S,S,T,T,S,S,S,S,T,S,S,S,T,T,T,T,S,S,S,T,T,S,S,S,T,T,S,S,S,S,T,T,S,S,S,T,T,T,T,T,S,S,S,T,T,S,S,T,T,T,S,S,S,S,T,T,T,T,T,N,T,S,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,T,S,S,T,T,S,S,T,S,S,N,N,S,N,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,S,T,S,T,T,T,T,T,S,T,T,S,T,T,S,S,S,T,T,S,T,T,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,S,S,T,T,S,T,T,S,S,T,S,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,T,T,S,T,T,T,S,S,T,S,S,T,T,S,S,T,S,T,S,T,T,S,S,S,S,T,S,T,T,T,S,T,S,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,N,N,S,S,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,S,T,S,T,T,T,T,T,S,T,T,S,T,T,S,S,S,T,T,S,T,T,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,T,T,S,T,T,T,S,S,T,S,S,T,T,S,S,T,S,T,S,T,T,S,S,S,S,T,S,T,T,T,S,T,S,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,S,S,T,T,S,T,T,S,S,T,S,T,S,T,S,T,T,T,T,T,S,T,T,S,S,S,T,S,S,T,T,S,S,T,S,T,S,T,T,S,S,T,T,T,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,N,S,S,S,T,S,S,S,S,T,S,T,T,T,S,S,S,T,T,T,T,T,T,S,S,S,S,S,S,T,T,S,S,T,T,T,S,S,S,S,T,S,S,S,T,T,T,T,S,S,S,T,T,T,T,T,T,S,S,S,S,S,S,T,T,S,S,T,T,T,S,N,S,S,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,S,T,S,T,T,T,T,T,S,T,T,S,T,T,S,S,S,T,T,S,T,T,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,T,T,S,T,T,T,S,S,T,S,S,T,T,S,S,T,S,T,S,T,T,S,S,S,S,T,S,T,T,T,S,T,S,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,S,S,T,T,S,T,T,S,S,T,S,T,N,S,S,S,T,S,T,T,T,S,S,S,T,T,T,T,T,T,T,T,T,S,S,S,S,T,S,S,S,S,T,S,T,T,T,S,S,S,T,T,S,S,T,T,T,S,S,S,S,T,S,S,S,T,T,T,T,S,S,S,T,T,S,S,T,T,T,S,S,S,S,T,T,S,S,S,T,T,T,T,T,S,S,S,T,T,S,S,T,T,T,S,S,S,S,T,T,T,T,T,N,T,S,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,T,S,S,T,T,S,S,T,S,S,N,N,S,N,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,S,T,S,T,T,T,T,T,S,T,T,S,T,T,S,S,S,T,T,S,T,T,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,T,T,S,T,T,T,S,S,T,S,S,T,T,S,S,T,S,T,S,T,T,S,S,S,S,T,S,T,T,T,S,T,S,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,S,S,T,T,S,T,T,S,S,T,S,T,N,N,S,S,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,S,T,T,S,T,T,S,T,T,T,T,S,T,T,T,S,S,S,S,S,T,T,T,T,S,S,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,T,S,S,T,T,S,S,T,S,S,N,N,T,N,N,S,S,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,S,T,T,T,T,T,S,T,T,T,T,S,T,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,T,T,T,T,N,N,S,S,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,S,T,T,T,T,T,S,T,T,T,T,S,T,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,T,T,T,T,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,S,T,T,S,S,S,S,T,S,T,T,T,S,S,T,S,S,T,T,T,S,T,S,S,N,S,N,S,N,T,S,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,S,T,T,T,T,T,S,T,T,T,T,S,T,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,T,T,T,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,T,S,S,T,T,S,S,T,S,S,N,S,N,T,S,N,S,S,S,S,T,T,S,S,S,S,T,T,S,S,S,S,N,T,S,S,S,T,T,S,S,T,N,S,N,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,S,T,T,T,T,T,S,T,T,T,T,S,T,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,T,T,T,T,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,S,T,T,S,S,S,S,T,S,T,T,T,S,S,T,S,S,T,T,T,S,T,S,S,N,N,S,S,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,S,T,S,T,S,T,T,T,T,T,S,T,T,T,T,S,T,S,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,T,T,T,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,T,S,S,T,T,S,S,T,S,S,N,S,S,N,S,S,N,N,T,N,N,S,S,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,S,T,S,T,N,S,S,S,T,S,S,N,T,T,T,S,S,S,S,T,S,N,T,T,T,S,S,S,S,T,T,T,T,N,S,S,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,S,T,S,T,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,S,T,T,S,S,S,S,T,S,T,T,T,S,S,T,S,S,T,T,T,S,T,S,S,N,S,N,S,S,N,S,T,T,S,S,S,S,T,T,S,S,S,S,N,S,S,S,S,T,S,T,T,T,T,S,S,T,N,T,S,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,S,T,S,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,T,S,S,T,T,S,S,T,S,S,N,N,S,N,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,S,T,S,T,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,S,T,T,S,S,S,S,T,S,T,T,T,S,S,T,S,S,T,T,T,S,T,S,S,N,N,S,S,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,T,S,T,T,S,T,T,S,T,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,S,T,S,T,S,T,T,T,S,S,T,S,S,T,T,S,S,T,S,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,T,S,S,T,T,S,S,T,S,S,N,S,S,N,N,T,N]

memoryWS :: String
memoryWS = ""

----


primILReduced :: InstructionList
primILReduced =
  [Mark "st",Push 0,Push 93,Push 48,Push 48,Push 49,Push 45,Push 50,Push 91,Push 32,Push 115,Push 114,Push 101,Push 98,Push 109,Push 117,Push 110,Push 32,Push 109,Push 105,Push 114,Push 112,Call "printsln",Push 0
  ,Mark "f_start_1",Dup,Push 100,Sub,BranchZ "f_finished_1",Dup,Push 100,Add,Push 1,Store,Push 1,Add,Branch "f_start_1"
  ,Mark "f_finished_1",Pop,Push 2
  ,Mark "f_start_2",Dup,Push 11,Sub,BranchZ "f_finished_2",Push 2
  ,Mark "f_start_3",Dup,Push 100,Sub,BranchZ "f_finished_3"
  ,Dup,Push 1,Swap,Store,Swap,Dup,Push 2,Swap,Store,Swap,Push 1,Load,Push 2,Load,Mul,Push 100,Add,Push 0,Store,Push 1,Add,Branch "f_start_3"
  ,Mark "f_finished_3",Pop,Push 1,Add,Branch "f_start_2"
  ,Mark "f_finished_2",Pop,Push 2
  ,Mark "f_start_4",Dup,Push 100,Sub,BranchZ "f_finished_4",Dup,Push 100,Add,Load,BranchZ "nodraw",Dup,OutputNum,Push 0,Push 32,Call "prints"
  ,Mark "nodraw",Push 1,Add,Branch "f_start_4"
  ,Mark "f_finished_4",Pop,Push 0,Call "printsln",End]

primTL :: TokenList
primTL = [N,S,S,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,N,S,S,S,S,S,S,T,S,T,T,T,S,T,S,S,S,T,T,S,S,S,S,S,S,S,T,T,S,S,S,S,S,S,S,T,T,S,S,S,T,S,S,S,T,S,T,T,S,T,S,S,S,T,T,S,S,T,S,S,S,S,T,S,T,T,S,T,T,S,S,S,T,S,S,S,S,S,S,S,S,T,T,T,S,S,T,T,S,S,S,T,T,T,S,S,T,S,S,S,S,T,T,S,S,T,S,T,S,S,S,T,T,S,S,S,T,S,S,S,S,T,T,S,T,T,S,T,S,S,S,T,T,T,S,T,S,T,S,S,S,T,T,S,T,T,T,S,S,S,S,T,S,S,S,S,S,S,S,S,T,T,S,T,T,S,T,S,S,S,T,T,S,T,S,S,T,S,S,S,T,T,T,S,S,T,S,S,S,S,T,T,T,S,S,S,S,N,S,T,S,T,T,T,S,S,S,S,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,S,S,T,T,T,S,S,T,T,S,T,T,S,T,T,S,S,S,T,T,S,T,T,T,S,N,S,S,S,N,S,S,S,T,T,S,S,T,T,S,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,S,T,T,S,S,S,S,T,S,T,T,T,S,S,T,S,S,T,T,T,S,T,S,S,S,T,S,T,T,T,T,T,S,S,T,T,S,S,S,T,N,S,N,S,S,S,S,T,T,S,S,T,S,S,T,S,S,T,N,T,S,S,T,T,S,S,T,T,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,S,T,S,S,T,S,T,T,T,S,S,T,T,S,T,T,S,T,S,S,S,S,T,T,S,S,T,S,T,S,T,T,S,S,T,S,S,S,T,S,T,T,T,T,T,S,S,T,T,S,S,S,T,N,S,N,S,S,S,S,T,T,S,S,T,S,S,T,S,S,S,S,S,S,T,T,T,S,S,S,S,T,T,S,S,S,N,S,N,S,T,T,S,S,T,T,S,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,S,T,T,S,S,S,S,T,S,T,T,T,S,S,T,S,S,T,T,T,S,T,S,S,S,T,S,T,T,T,T,T,S,S,T,T,S,S,S,T,N,N,S,S,S,T,T,S,S,T,T,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,S,T,S,S,T,S,T,T,T,S,S,T,T,S,T,T,S,T,S,S,S,S,T,T,S,S,T,S,T,S,T,T,S,S,T,S,S,S,T,S,T,T,T,T,T,S,S,T,T,S,S,S,T,N,S,S,N,S,S,S,T,S,N,S,S,S,T,T,S,S,T,T,S,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,S,T,T,S,S,S,S,T,S,T,T,T,S,S,T,S,S,T,T,T,S,T,S,S,S,T,S,T,T,T,T,T,S,S,T,T,S,S,T,S,N,S,N,S,S,S,S,T,S,T,T,T,S,S,T,N,T,S,S,T,T,S,S,T,T,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,S,T,S,S,T,S,T,T,T,S,S,T,T,S,T,T,S,T,S,S,S,S,T,T,S,S,T,S,T,S,T,T,S,S,T,S,S,S,T,S,T,T,T,T,T,S,S,T,T,S,S,T,S,N,S,S,S,T,S,N,S,S,S,T,T,S,S,T,T,S,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,S,T,T,S,S,S,S,T,S,T,T,T,S,S,T,S,S,T,T,T,S,T,S,S,S,T,S,T,T,T,T,T,S,S,T,T,S,S,T,T,N,S,N,S,S,S,S,T,T,S,S,T,S,S,T,S,S,T,N,T,S,S,T,T,S,S,T,T,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,S,T,S,S,T,S,T,T,T,S,S,T,T,S,T,T,S,T,S,S,S,S,T,T,S,S,T,S,T,S,T,T,S,S,T,S,S,S,T,S,T,T,T,T,T,S,S,T,T,S,S,T,T,N,S,N,S,S,S,S,T,S,N,T,T,T,S,S,N,T,S,N,S,S,S,S,T,S,S,N,T,T,T,S,S,N,T,S,S,S,T,T,T,T,S,S,S,T,S,T,T,T,T,S,S,N,S,S,S,T,T,S,S,T,S,S,T,S,S,S,S,S,S,T,T,S,S,S,S,T,T,S,S,S,N,S,N,S,T,T,S,S,T,T,S,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,S,T,T,S,S,S,S,T,S,T,T,T,S,S,T,S,S,T,T,T,S,T,S,S,S,T,S,T,T,T,T,T,S,S,T,T,S,S,T,T,N,N,S,S,S,T,T,S,S,T,T,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,S,T,S,S,T,S,T,T,T,S,S,T,T,S,T,T,S,T,S,S,S,S,T,T,S,S,T,S,T,S,T,T,S,S,T,S,S,S,T,S,T,T,T,T,T,S,S,T,T,S,S,T,T,N,S,S,N,S,S,S,T,T,S,S,S,N,S,N,S,T,T,S,S,T,T,S,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,S,T,T,S,S,S,S,T,S,T,T,T,S,S,T,S,S,T,T,T,S,T,S,S,S,T,S,T,T,T,T,T,S,S,T,T,S,S,T,S,N,N,S,S,S,T,T,S,S,T,T,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,S,T,S,S,T,S,T,T,T,S,S,T,T,S,T,T,S,T,S,S,S,S,T,T,S,S,T,S,T,S,T,T,S,S,T,S,S,S,T,S,T,T,T,T,T,S,S,T,T,S,S,T,S,N,S,S,N,S,S,S,T,S,N,S,S,S,T,T,S,S,T,T,S,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,S,T,T,S,S,S,S,T,S,T,T,T,S,S,T,S,S,T,T,T,S,T,S,S,S,T,S,T,T,T,T,T,S,S,T,T,S,T,S,S,N,S,N,S,S,S,S,T,T,S,S,T,S,S,T,S,S,T,N,T,S,S,T,T,S,S,T,T,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,S,T,S,S,T,S,T,T,T,S,S,T,T,S,T,T,S,T,S,S,S,S,T,T,S,S,T,S,T,S,T,T,S,S,T,S,S,S,T,S,T,T,T,T,T,S,S,T,T,S,T,S,S,N,S,N,S,S,S,S,T,T,S,S,T,S,S,T,S,S,S,T,T,T,N,T,S,S,T,T,S,T,T,T,S,S,T,T,S,T,T,T,T,S,T,T,S,S,T,S,S,S,T,T,T,S,S,T,S,S,T,T,S,S,S,S,T,S,T,T,T,S,T,T,T,N,S,N,S,T,N,S,T,S,S,S,S,S,S,T,S,S,S,S,S,N,S,T,S,T,T,T,S,S,S,S,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,S,S,T,T,T,S,S,T,T,N,N,S,S,S,T,T,S,T,T,T,S,S,T,T,S,T,T,T,T,S,T,T,S,S,T,S,S,S,T,T,T,S,S,T,S,S,T,T,S,S,S,S,T,S,T,T,T,S,T,T,T,N,S,S,S,T,T,S,S,S,N,S,N,S,T,T,S,S,T,T,S,S,T,S,T,T,T,T,T,S,T,T,T,S,S,T,T,S,T,T,T,S,T,S,S,S,T,T,S,S,S,S,T,S,T,T,T,S,S,T,S,S,T,T,T,S,T,S,S,S,T,S,T,T,T,T,T,S,S,T,T,S,T,S,S,N,N,S,S,S,T,T,S,S,T,T,S,S,T,S,T,T,T,T,T,S,T,T,S,S,T,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,S,T,S,S,T,S,T,T,T,S,S,T,T,S,T,T,S,T,S,S,S,S,T,T,S,S,T,S,T,S,T,T,S,S,T,S,S,S,T,S,T,T,T,T,T,S,S,T,T,S,T,S,S,N,S,S,N,S,S,S,N,S,T,S,T,T,T,S,S,S,S,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,S,S,T,T,T,S,S,T,T,S,T,T,S,T,T,S,S,S,T,T,S,T,T,T,S,N,N,N,N,N,S,S,S,T,T,T,S,S,S,S,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,S,S,T,T,T,S,S,T,T,N,S,N,S,N,T,S,S,T,T,T,S,S,S,S,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,S,S,T,T,T,S,S,T,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,T,S,S,T,T,S,S,T,S,S,N,T,N,S,S,N,S,N,S,T,T,T,S,S,S,S,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,S,S,T,T,T,S,S,T,T,N,N,S,S,S,T,T,T,S,S,S,S,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,S,S,T,T,T,S,S,T,T,S,T,S,T,T,T,T,T,S,T,T,S,S,T,S,T,S,T,T,S,T,T,T,S,S,T,T,S,S,T,S,S,N,S,S,N,N,T,N,N,S,S,S,T,T,T,S,S,S,S,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,S,S,T,T,T,S,S,T,T,S,T,T,S,T,T,S,S,S,T,T,S,T,T,T,S,N,N,S,T,S,T,T,T,S,S,S,S,S,T,T,T,S,S,T,S,S,T,T,S,T,S,S,T,S,T,T,S,T,T,T,S,S,T,T,T,S,T,S,S,S,T,T,T,S,S,T,T,N,S,S,S,T,S,T,S,T,N,S,S,N,T,N]

primWS :: String
primWS = ""
